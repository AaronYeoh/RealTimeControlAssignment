
AVRASM ver. 2.1.57  H:\Documents\RealTimeControlAssignment\AVR Assignment\AVR Assignment\AVR Assignment.asm Thu Sep 17 12:33:24 2015

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m8def.inc'
H:\Documents\RealTimeControlAssignment\AVR Assignment\AVR Assignment\AVR Assignment.asm(50): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m8def.inc'
H:\Documents\RealTimeControlAssignment\AVR Assignment\AVR Assignment\AVR Assignment.asm(120): Including file 'H:\Documents\RealTimeControlAssignment\AVR Assignment\AVR Assignment\MECHENG313A.inc'
                 
                 /*
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8.xml *************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m8def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega8
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega8
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M8DEF_INC_
                 #define _M8DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega8
                 #pragma AVRPART ADMIN PART_NAME ATmega8
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x93
                 .equ	SIGNATURE_002	= 0x07
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCL	= 0x04
                 .equ	ADCH	= 0x05
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - MCU Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 
                 ; TCCR0 - Timer/Counter0 Control Register
                 .equ	CS00	= 0	; Clock Select0 bit 0
                 .equ	CS01	= 1	; Clock Select0 bit 1
                 .equ	CS02	= 2	; Clock Select0 bit 2
                 
                 ; TCNT0 - Timer Counter 0
                 .equ	TCNT00	= 0	; Timer Counter 0 bit 0
                 .equ	TCNT01	= 1	; Timer Counter 0 bit 1
                 .equ	TCNT02	= 2	; Timer Counter 0 bit 2
                 .equ	TCNT03	= 3	; Timer Counter 0 bit 3
                 .equ	TCNT04	= 4	; Timer Counter 0 bit 4
                 .equ	TCNT05	= 5	; Timer Counter 0 bit 5
                 .equ	TCNT06	= 6	; Timer Counter 0 bit 6
                 .equ	TCNT07	= 7	; Timer Counter 0 bit 7
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Waveform Generation Mode
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Waveform Genration Mode
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	I2BR	= TWBR	; For compatibility
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	I2CR	= TWCR	; For compatibility
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	I2IE	= TWIE	; For compatibility
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	I2EN	= TWEN	; For compatibility
                 .equ	ENI2C	= TWEN	; For compatibility
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	I2WC	= TWWC	; For compatibility
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	I2STO	= TWSTO	; For compatibility
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	I2STA	= TWSTA	; For compatibility
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	I2EA	= TWEA	; For compatibility
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 .equ	I2INT	= TWINT	; For compatibility
                 
                 ; TWSR - TWI Status Register
                 .equ	I2SR	= TWSR	; For compatibility
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWS0	= TWPS0	; For compatibility
                 .equ	I2GCE	= TWPS0	; For compatibility
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS1	= TWPS1	; For compatibility
                 .equ	TWS3	= 3	; TWI Status
                 .equ	I2S3	= TWS3	; For compatibility
                 .equ	TWS4	= 4	; TWI Status
                 .equ	I2S4	= TWS4	; For compatibility
                 .equ	TWS5	= 5	; TWI Status
                 .equ	I2S5	= TWS5	; For compatibility
                 .equ	TWS6	= 6	; TWI Status
                 .equ	I2S6	= TWS6	; For compatibility
                 .equ	TWS7	= 7	; TWI Status
                 .equ	I2S7	= TWS7	; For compatibility
                 
                 ; TWDR - TWI Data register
                 .equ	I2DR	= TWDR	; For compatibility
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	I2AR	= TWAR	; For compatibility
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDTCSR	= WDTCR	; For compatibility
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDTOE	= WDCE	; For compatibility
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EEWEE	= EEMWE	; For compatibility
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PUD	= 2	; Pull-up Disable
                 .equ	ADHSM	= 4	; ADC High Speed Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADFR	= 5	; ADC  Free Running Select
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	CKOPT	= 4	; Oscillator Options
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	WTDON	= 6	; Enable watchdog
                 .equ	RSTDISBL	= 7	; Disable reset
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 1024
                 .equ	RAMEND	= 0x045f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x01ff
                 .equ	EEPROMEND	= 0x01ff
                 .equ	EEADRBITS	= 9
                 #pragma AVRPART MEMORY PROG_FLASH 8192
                 #pragma AVRPART MEMORY EEPROM 512
                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0xc00
                 .equ	NRWW_STOP_ADDR	= 0xfff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0xbff
                 .equ	PAGESIZE	= 32
                 .equ	FIRSTBOOTSTART	= 0xf80
                 .equ	SECONDBOOTSTART	= 0xf00
                 .equ	THIRDBOOTSTART	= 0xe00
                 .equ	FOURTHBOOTSTART	= 0xc00
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                 .equ	OC2addr	= 0x0003	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x0004	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                 .equ	OVF0addr	= 0x0009	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x000a	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x000b	; USART, Rx Complete
                 .equ	UDREaddr	= 0x000c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x000d	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x000e	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                 .equ	ACIaddr	= 0x0010	; Analog Comparator
                 .equ	TWIaddr	= 0x0011	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0012	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 19	; size in words
                 
                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                 
                 #endif  /* _M8DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                  * Lab2.asm
                  *	DOOR LED - PB2
                  *	DOOR TOGGLE SWITCH - PD2 (Switch 1 on STK500)
                  *  
                  *	COLLISION LED - PB4
                  *
                  *  Created: 4/08/2015 2:43:56 p.m.
                  *   Authors: xwan572 & ayeo722
                  */ 
                  ;************push and pop potential register used****************
                 .MACRO PopAll
                 	pop r16
                 	out SREG, r16 
                 	pop r0
                 	pop r1
                 	pop r16
                 	pop r17
                 	pop r18
                 	pop r19
                 	pop r20
                 	pop r21
                 	pop r22
                 	pop r23
                 	pop r24
                 
                 .ENDMACRO
                 
                 
                 
                 .MACRO PushAll
                 	push r24
                 	push r23
                 	push r22
                 	push r21
                 	push r20
                 	push r19
                 	push r18
                 	push r17
                 	push r16
                 	push r1
                 	push r0
                 	in r16, SREG
                 	push r16
                 .ENDMACRO
                 ;************end push and pop****************
                 
                 
                 .list						;Turn listfile generation On
                 
                 .dseg 						; Start data segment
                 .org 0x67 					; Set SRAM address to hex 67
                 
000067           PulseWidth: .byte 1 
000068           PulseCounterSchedule: .byte 1 ; reserve 1 byte for counter of Task_3
                 
000069           LeftBroken: .byte 1
00006a           TurnOnLeftNext: .byte 1
00006b           TurnOffLeftNext: .byte 1
                 
00006c           RightBroken: .byte 1
00006d           TurnOnRightNext: .byte 1
00006e           TurnOffRightNext: .byte 1
                 
00006f           LeftToggled: .byte 1
000070           RightToggled: .byte 1
                 
                 
                 ;Flags for piorities
                 
                 
000071           FuelInjRunning: .byte 1 ; 0x71
000072           IndicatorRunning: .byte 1
000073           DoorStopped: .byte 1
000074           IndicatorStopped: .byte 1
                 
                 
                 /*  ************ Instructions on using variables in program memory
                 .DSEG 
                 var1:  .BYTE 1 ; reserve 1 byte to var1 
                 table: .BYTE tab_size ; reserve tab_size bytes
                 
                 .CSEG 
                 ldi r30,low(var1) ; Load Z register low 
                 ldi r31,high(var1) ; Load Z register high 
                 ld r1,Z ; Load VAR1 into register 1
                 */
                 ; Reserve a byte at SRAM
                 
                 
                 .cseg
                 .org $00000					;Setting Origin Address
000000 c2b0      		rjmp Main 			;Reset vector
                 .org INT0addr				;Setting Origin Address
000001 c40a      		rjmp IntV0 			;INT vector - for toggling the door state
                 ;.org INT1addr				;Setting Origin Address
                 ;		rjmp IntV1			;INT vector - for toggling the light state
                 .org ADCCaddr
00000e c433      		rjmp ADCF0
                 .org OVF0addr				;Setting Origin Address
000009 c2eb      		rjmp ClockTick 		;ClockTick vector
                 .org OVF1addr				;Setting Origin Address
000008 c318      		rjmp ClockTickLeftRight 		;ClockTick vector
                 
                 ;.cseg
                 .org   0x0100               ;table address engine speed (RPM) and load
                 ;Load/RPM('000)
                 RPMLoad_Lookup:       ;1/1	2/1	  3/1	4/1	   1/2  2/2  3/2    4/2	   1/3	2/3	  3/3	4/3	   1/4	  2/4	3/4	  4/4  
000100 0201
000101 0403
000102 0402
000103 0806
000104 0603
000105 0c09
000106 0804
000107 100c      	        .db       0x01, 0x02, 0x03, 0x04, 0x02, 0x04, 0x06, 0x08, 0x03, 0x06, 0x09, 0x0C, 0x04, 0x08, 0x0C, 0x10
                 
                 FactorA_Lookup:		;0  25  50  75
000108 0b0c
000109 090a      			.db		12, 11, 10, 9
                 
                 FactorB_Lookup:		;1 2  3  4 //factor B
00010a 0404
00010b 0304      			.db		4, 4, 4, 3	
                 
                 .org $00200					;Setting Origin Address
                 .include "MECHENG313A.inc"	;Functions needed for MECHENG313
                 
                 
                 ;**** A P P L I C A T I O N   N O T E   A V R 2 0 1 ***************************
                 ;*
                 ;* Title		: 16bit multiply routines using hardware multiplier
                 ;* Version		: V1.0
                 ;* Last updated		: 5 Apr, 1999
                 ;* Target		: ATmega83/161/163
                 ;*
                 ;* Support email	: avr@atmel.com
                 ;*
                 ;* DESCRIPTION
                 ;* 	This application note shows a number of examples of how to implement
                 ;*	16bit multiplication using hardware multiplier. Refer to each of the
                 ;*	funtions headers for details. The functions included in this file
                 ;*	are :
                 ;*
                 ;*	mul16x16_16	- Multiply of two 16bits numbers with 16bits result.
                 ;*	mul16x16_32	- Unsigned multiply of two 16bits numbers with 32bits
                 ;*			  result.
                 ;*	muls16x16_32	- Signed multiply of two 16bits numbers with 32bits
                 ;*			  result.
                 ;*	mac16x16_32	- Signed multiply accumulate of two 16bits numbers
                 ;*			  with a 32bits result.
                 ;*	fmuls16x16_32	- Signed fractional multiply of two 16bits numbers
                 ;*			  with 32bits result.
                 ;*	fmac16x16_32	- Signed fractional multiply accumulate of two 16bits
                 ;*			  numbers with a 32bits result.
                 ;*
                 ;******************************************************************************
                 
                 
                 ;******************************************************************************
                 ;*
                 ;* FUNCTION
                 ;*	mul16x16_16
                 ;* DECRIPTION
                 ;*	Multiply of two 16bits numbers with 16bits result.
                 ;* USAGE
                 ;*	r17:r16 = r23:r22 * r21:r20
                 ;* STATISTICS
                 ;*	Cycles :	9 + ret
                 ;*	Words :		6 + ret
                 ;*	Register usage: r0, r1 and r16 to r23 (8 registers)
                 ;* NOTE
                 ;*	Full orthogonality i.e. any register pair can be used as long as
                 ;*	the result and the two operands does not share register pairs.
                 ;*	The routine is non-destructive to the operands.
                 ;*
                 ;******************************************************************************
                 
                 mul16x16_16:
000200 9f64      	mul	r22, r20		; al * bl
000201 0180      	movw	r17:r16, r1:r0
000202 9f74      	mul	r23, r20		; ah * bl
000203 0d10      	add	r17, r0
000204 9f56      	mul	r21, r22		; bh * al
000205 0d10      	add	r17, r0
000206 9508      	ret
                 
                 
                 ;******************************************************************************
                 ;*
                 ;* FUNCTION
                 ;*	mul16x16_32
                 ;* DECRIPTION
                 ;*	Unsigned multiply of two 16bits numbers with 32bits result.
                 ;* USAGE
                 ;*	r19:r18:r17:r16 = r23:r22 * r21:r20
                 ;* STATISTICS
                 ;*	Cycles :	17 + ret
                 ;*	Words :		13 + ret
                 ;*	Register usage: r0 to r2 and r16 to r23 (11 registers)
                 ;* NOTE
                 ;*	Full orthogonality i.e. any register pair can be used as long as
                 ;*	the 32bit result and the two operands does not share register pairs.
                 ;*	The routine is non-destructive to the operands.
                 ;*
                 ;******************************************************************************
                 
                 mul16x16_32:
000207 2422      	clr	r2
000208 9f75      	mul	r23, r21		; ah * bh
000209 0190      	movw	r19:r18, r1:r0
00020a 9f64      	mul	r22, r20		; al * bl
00020b 0180      	movw	r17:r16, r1:r0
00020c 9f74      	mul	r23, r20		; ah * bl
00020d 0d10      	add	r17, r0
00020e 1d21      	adc	r18, r1
00020f 1d32      	adc	r19, r2
000210 9f56      	mul	r21, r22		; bh * al
000211 0d10      	add	r17, r0
000212 1d21      	adc	r18, r1
000213 1d32      	adc	r19, r2
000214 9508      	ret
                 
                 
                 ;******************************************************************************
                 ;*
                 ;* FUNCTION
                 ;*	muls16x16_32
                 ;* DECRIPTION
                 ;*	Signed multiply of two 16bits numbers with 32bits result.
                 ;* USAGE
                 ;*	r19:r18:r17:r16 = r23:r22 * r21:r20
                 ;* STATISTICS
                 ;*	Cycles :	19 + ret
                 ;*	Words :		15 + ret
                 ;*	Register usage: r0 to r2 and r16 to r23 (11 registers)
                 ;* NOTE
                 ;*	The routine is non-destructive to the operands.
                 ;*
                 ;******************************************************************************
                 
                 muls16x16_32:
000215 2422      	clr	r2
000216 0275      	muls	r23, r21		; (signed)ah * (signed)bh
000217 0190      	movw	r19:r18, r1:r0
000218 9f64      	mul	r22, r20		; al * bl
000219 0180      	movw	r17:r16, r1:r0
00021a 0374      	mulsu	r23, r20		; (signed)ah * bl
00021b 0932      	sbc	r19, r2
00021c 0d10      	add	r17, r0
00021d 1d21      	adc	r18, r1
00021e 1d32      	adc	r19, r2
00021f 0356      	mulsu	r21, r22		; (signed)bh * al
000220 0932      	sbc	r19, r2
000221 0d10      	add	r17, r0
000222 1d21      	adc	r18, r1
000223 1d32      	adc	r19, r2
000224 9508      	ret
                 
                 
                 ;******************************************************************************
                 ;*
                 ;* FUNCTION
                 ;*	mac16x16_32
                 ;* DECRIPTION
                 ;*	Signed multiply accumulate of two 16bits numbers with
                 ;*	a 32bits result.
                 ;* USAGE
                 ;*	r19:r18:r17:r16 += r23:r22 * r21:r20
                 ;* STATISTICS
                 ;*	Cycles :	23 + ret
                 ;*	Words :		19 + ret
                 ;*	Register usage: r0 to r2 and r16 to r23 (11 registers)
                 ;*
                 ;******************************************************************************
                 
                 mac16x16_32:
000225 2422      	clr	r2
                 
000226 0275      	muls	r23, r21		; (signed)ah * (signed)bh
000227 0d20      	add	r18, r0
000228 1d31      	adc	r19, r1
                 
000229 9f64      	mul	r22, r20		; al * bl
00022a 0d00      	add	r16, r0
00022b 1d11      	adc	r17, r1
00022c 1d22      	adc	r18, r2
00022d 1d32      	adc	r19, r2
                 
00022e 0374      	mulsu	r23, r20		; (signed)ah * bl
00022f 0932      	sbc	r19, r2
000230 0d10      	add	r17, r0
000231 1d21      	adc	r18, r1
000232 1d32      	adc	r19, r2
                 
000233 0356      	mulsu	r21, r22		; (signed)bh * al
000234 0932      	sbc	r19, r2
000235 0d10      	add	r17, r0
000236 1d21      	adc	r18, r1
000237 1d32      	adc	r19, r2
                 
000238 9508      	ret
                 
                 mac16x16_32_method_B:			; uses two temporary registers
                 					; (r4,r5), but reduces cycles/words
                 					; by 1
000239 2422      	clr	r2
                 
00023a 0275      	muls	r23, r21		; (signed)ah * (signed)bh
00023b 0120      	movw	r5:r4,r1:r0
                 
00023c 9f64      	mul	r22, r20		; al * bl
                 
00023d 0d00      	add	r16, r0
00023e 1d11      	adc	r17, r1
00023f 1d24      	adc	r18, r4
000240 1d35      	adc	r19, r5
                 
000241 0374      	mulsu	r23, r20		; (signed)ah * bl
000242 0932      	sbc	r19, r2
000243 0d10      	add	r17, r0
000244 1d21      	adc	r18, r1
000245 1d32      	adc	r19, r2
                 
000246 0356      	mulsu	r21, r22		; (signed)bh * al
000247 0932      	sbc	r19, r2
000248 0d10      	add	r17, r0
000249 1d21      	adc	r18, r1
00024a 1d32      	adc	r19, r2
                 
00024b 9508      	ret
                 
                 
                 ;******************************************************************************
                 ;*
                 ;* FUNCTION
                 ;*	fmuls16x16_32
                 ;* DECRIPTION
                 ;*	Signed fractional multiply of two 16bits numbers with 32bits result.
                 ;* USAGE
                 ;*	r19:r18:r17:r16 = ( r23:r22 * r21:r20 ) << 1
                 ;* STATISTICS
                 ;*	Cycles :	20 + ret
                 ;*	Words :		16 + ret
                 ;*	Register usage: r0 to r2 and r16 to r23 (11 registers)
                 ;* NOTE
                 ;*	The routine is non-destructive to the operands.
                 ;*
                 ;******************************************************************************
                 
                 fmuls16x16_32:
00024c 2422      	clr	r2
00024d 03f5      	fmuls	r23, r21		; ( (signed)ah * (signed)bh ) << 1
00024e 0190      	movw	r19:r18, r1:r0
00024f 036c      	fmul	r22, r20		; ( al * bl ) << 1
000250 1d22      	adc	r18, r2
000251 0180      	movw	r17:r16, r1:r0
000252 03fc      	fmulsu	r23, r20		; ( (signed)ah * bl ) << 1
000253 0932      	sbc	r19, r2
000254 0d10      	add	r17, r0
000255 1d21      	adc	r18, r1
000256 1d32      	adc	r19, r2
000257 03de      	fmulsu	r21, r22		; ( (signed)bh * al ) << 1
000258 0932      	sbc	r19, r2
000259 0d10      	add	r17, r0
00025a 1d21      	adc	r18, r1
00025b 1d32      	adc	r19, r2
00025c 9508      	ret
                 
                 	
                 ;******************************************************************************
                 ;*
                 ;* FUNCTION
                 ;*	fmac16x16_32
                 ;* DECRIPTION
                 ;*	Signed fractional multiply accumulate of two 16bits numbers with
                 ;*	a 32bits result.
                 ;* USAGE
                 ;*	r19:r18:r17:r16 += (r23:r22 * r21:r20) << 1
                 ;* STATISTICS
                 ;*	Cycles :	25 + ret
                 ;*	Words :		21 + ret
                 ;*	Register usage: r0 to r2 and r16 to r23 (11 registers)
                 ;*
                 ;******************************************************************************
                 
                 fmac16x16_32:
00025d 2422      	clr	r2
                 
00025e 03f5      	fmuls	r23, r21		; ( (signed)ah * (signed)bh ) << 1
00025f 0d20      	add	r18, r0
000260 1d31      	adc	r19, r1
                 
000261 036c      	fmul	r22, r20		; ( al * bl ) << 1
000262 1d22      	adc	r18, r2
000263 1d32      	adc	r19, r2
000264 0d00      	add	r16, r0
000265 1d11      	adc	r17, r1
000266 1d22      	adc	r18, r2
000267 1d32      	adc	r19, r2
                 
000268 03fc      	fmulsu	r23, r20		; ( (signed)ah * bl ) << 1
000269 0932      	sbc	r19, r2
00026a 0d10      	add	r17, r0
00026b 1d21      	adc	r18, r1
00026c 1d32      	adc	r19, r2
                 
00026d 03de      	fmulsu	r21, r22		; ( (signed)bh * al ) << 1
00026e 0932      	sbc	r19, r2
00026f 0d10      	add	r17, r0
000270 1d21      	adc	r18, r1
000271 1d32      	adc	r19, r2
                 
000272 9508      	ret
                 
                 fmac16x16_32_method_B:			; uses two temporary registers
                 					; (r4,r5), but reduces cycles/words
                 					; by 2
000273 2422      	clr	r2
                 
000274 03f5      	fmuls	r23, r21		; ( (signed)ah * (signed)bh ) << 1
000275 0120      	movw	r5:r4,r1:r0
000276 036c      	fmul	r22, r20		; ( al * bl ) << 1
000277 1c42      	adc	r4, r2
                 
000278 0d00      	add	r16, r0
000279 1d11      	adc	r17, r1
00027a 1d24      	adc	r18, r4
00027b 1d35      	adc	r19, r5
                 
00027c 03fc      	fmulsu	r23, r20		; ( (signed)ah * bl ) << 1
00027d 0932      	sbc	r19, r2
00027e 0d10      	add	r17, r0
00027f 1d21      	adc	r18, r1
000280 1d32      	adc	r19, r2
000281 03de      	fmulsu	r21, r22		; ( (signed)bh * al ) << 1
000282 0932      	sbc	r19, r2
000283 0d10      	add	r17, r0
000284 1d21      	adc	r18, r1
000285 1d32      	adc	r19, r2
                 
000286 9508      	ret
                 
                 
                 ;***************************************************************************
                 ;*
                 ;* "div24x24_24" - 24/24 Bit Unsigned Division
                 ;*
                 ;* This subroutine divides the two 24-bit numbers 
                 ;* "r24:r23:r22" (dividend) and "r21:r20:r19" (divisor). 
                 ;* The result is placed in "r24:r23:r22" and the remainder in
                 ;* "r18:r17:r16".
                 ;*  
                 ;* Number of words	:
                 ;* Number of cycles	:
                 ;* Low registers used	:3 (r16,r17 r18)
                 ;* High registers used  :6 (r19/r22, r20/r23, r21/r24,r19,r20,r21)
                 ;* r24:r23:r22 = r24:r23:r22 / r21:r20:r19
                 ;***************************************************************************
                 
                 ;***** Subroutine Register Variables
                 div24x24_24:
                 ;***** Code
                 
000287 2700      	clr	r16	;clear remainder Low byte
000288 2711      	clr r17
000289 1b22      	sub	r18,r18;clear remainder High byte and carry
00028a e199      	ldi	r25,25	;init loop counter
00028b 1f66      d24u_1:	rol	r22		;shift left dividend
00028c 1f77      	rol r23
00028d 1f88      	rol	r24
00028e 959a      	dec	r25		;decrement counter
00028f f409      	brne	d24u_2		;if done
000290 9508      	ret			;    return
000291 1f00      d24u_2:	rol	r16	;shift dividend into remainder
000292 1f11      	rol r17
000293 1f22      	rol	r18
000294 1b03      	sub	r16,r19	;remainder = remainder - divisor
000295 0b14      	sbc r17,r20 ;
000296 0b25      	sbc	r18,r21	;
000297 f428      	brcc	d24u_3		;if result negative
000298 0f03      	add	r16,r19	;    restore remainder
000299 1f14      	adc r17,r20
                 
00029a 1f25      	adc	r18,r21
00029b 9488      	clc			;    clear carry to be shifted into result
00029c cfee      	rjmp	d24u_1		;else
00029d 9408      d24u_3:	sec			;    set carry to be shifted into result
00029e cfec      	rjmp	d24u_1
                 	
00029f 9508      	ret
                 	
                 
                 ;***************************************************************************
                 ;*
                 ;* "div8u" - 8/8 Bit Unsigned Division
                 ;*
                 ;* This subroutine divides the two register variables "dd8u" (dividend) and 
                 ;* "dv8u" (divisor). The result is placed in "dres8u" and the remainder in
                 ;* "drem8u".
                 ;*  
                 ;* Number of words	:14
                 ;* Number of cycles	:97
                 ;* Low registers used	:1 (drem8u)
                 ;* High registers used  :3 (dres8u/dd8u,dv8u,dcnt8u)
                 ;* r21 = r21/r22
                 ;***************************************************************************
                 
                 ;***** Subroutine Register Variables
                 
                 ;r20		;remainder
                 ;r21		;result
                 ;r21		;dividend
                 ;r22		;divisor
                 ;r23		;loop counter
                 
                 ;***** Code
                 
0002a0 1b44      div8u:	sub	r20,r20	;clear remainder and carry
0002a1 e079      		ldi	r23,9	;init loop counter
0002a2 1f55      d8u_1:	rol	r21		;shift left dividend
0002a3 957a      		dec	r23		;decrement counter
0002a4 f409      		brne	d8u_2		;if done
0002a5 9508      		ret			;    return
0002a6 1f44      d8u_2:	rol	r20		;shift dividend into remainder
0002a7 1b46      		sub	r20,r22	;remainder = remainder - divisor
0002a8 f418      		brcc	d8u_3		;if result negative
0002a9 0f46      		add	r20,r22	;    restore remainder
0002aa 9488      		clc			;    clear carry to be shifted into result
0002ab cff6      		rjmp	d8u_1		;else
0002ac 9408      d8u_3:	sec			;    set carry to be shifted into result
0002ad cff4      		rjmp	d8u_1
                 
                 
                 
                 ;***************************************************************************
                 ;*
                 ;* Mecheng 313
                 ;*
                 ;* 
                 ;*
                 ;* 
                 ;* 
                 ;*  
                 ;* 
                 ;*
                 ;* 
                 ;* 
                 ;* 	
                 ;***************************************************************************
                 
                 
                 .equ	ClockTick_Task = 0
                 .equ	UpTime = -1	
                 
                 System_Monitor:
0002ae dfd8      				rcall div24x24_24
0002af dff0      				rcall div8u
0002b0 9508      				ret
                 				
                 .MACRO Start_Task ; Start macro definition
                 		sbi DDRD,(PD4 + @0)
                 		sbi PORTD,(PD4 + @0)
                 .ENDMACRO
                 
                 .MACRO End_Task ; Start macro definition
                 		cbi PORTD,(PD4 +@0)
                 .ENDMACRO
                 
                 
                 ;**** End of File ****
                 	
                 
                 
                 
                 
                 
                 ;***************** Start of Main *****************
                 Main: 
0002b1 e50f      		ldi r16,LOW(RAMEND)	    ;Initialise your stack pointer here
0002b2 bf0d      		out SPL,r16						
0002b3 e004      		ldi r16,HIGH(RAMEND)						
0002b4 bf0e      		out SPH,r16		
                 			
                 
                 		;SBI DDRD, PD4		;I/O Setup Left broken toggle
                 		;SBI DDRD, PD5		;I/O Setup Right Broken toggle
                 		;sbi PORTD,PD2		; Test code. Turns on an LED
                 
                 		;Set the DDR for PORTB, allowing for us to write out
0002b5 9ab8      		sbi DDRB, PB0; left LED
0002b6 9aba      		sbi DDRB, PB2  ;door LED
0002b7 9abc      		sbi DDRB, PB4; collision LED
0002b8 9ab9      		sbi DDRB, PB1; right LED
                 
                 		;Set everything high in PORTD, set DDRD to be input only
0002b9 ef0f      		ldi r16, $FF;
0002ba bb02      		out PORTD, r16
0002bb 2700      		clr r16
0002bc bb01      		out DDRD, r16
                 
0002bd 9ac2      		sbi PORTB, PB2 ; Turns off Pin2 of PortB. Note the negative logic. For the collision detection
0002be 9ac4      		sbi PORTB, PB4	; Turns off Pin4 of PortB. For the door indicator. Door initialised as shut.
0002bf 9ac1      		sbi PORTB, PB1	; Turns off Pin7 of PortB. LeftLED init as off
0002c0 9ac0      		sbi PORTB, PB0	; Turns off Pin0 of PortB. RightLED init as off
                 		
0002c1 ec00      		ldi r16,(1<<INT0) | (1<<INT1); int mask 0 set +  (1<<INT1) 
0002c2 bf0b      		out GICR,r16
0002c3 e00a      		ldi r16,(1<<ISC01) | (1<<ISC11)		; interrupt t0 on falling edge
0002c4 bf05      		out MCUCR,r16		;Interrupt Setup
                 		
                 
                 		;********* ADC ********
                 		; set MUX to channel 2, left adjust the result, AREF taken from AVCC
0002c5 e001      		ldi r16, (1<<MUX0) ; ADMUX channel 2, AREF from AVCC PORTC
0002c6 b907      		out ADMUX,r16
                 		; switch AD conversion on, start conversion, divider rate = 16
0002c7 ee0c      		ldi r16, (1<<ADEN)|(1<<ADSC)|(1<<ADPS2)|(1<<ADFR)| (1<<ADIE)
0002c8 b906      		out ADCSRA, r16
                 
                 
                 		;cbi DDRC,PC1		; DELETE ?
                 
                 		;********* ClockTick 8-bit Timer/Counter 0 *******      
0002c9 e003      		ldi r16, (1<<CS01) | (1<< CS00)      ; Start Counter 0      
0002ca bf03            	out TCCR0, r16			; Timer Clock = Sys Clock (1MHz) / 8 (prescaler)
                 		
0002cb e800      		ldi	r16, 128				; MaxValue = TOVck (1.5ms or your Cal time) * Pck (1MHz) / 8 (prescaler)
0002cc bf02      		out TCNT0, r16			; TCNT0Value = 255 - MaxValue	
                 		
                 
                 		;********* ClockTick 16-bit Timer/Counter 1 *******      
0002cd e002      		ldi r16, (1<<CS11)      ; Start Counter 0      
0002ce bd0e            	out TCCR1B, r16			; Timer Clock = Sys Clock (1MHz) / 8 (prescaler)
                 		
                 		;to get 0.25ms per interrupt, TCNT1 = 34286 = $85EE
0002cf ee0e      		ldi	r16, $EE			; MaxValue = TOVck (1.5ms or your Cal time) * Pck (1MHz) / 8 (prescaler)
0002d0 bd0c      		out TCNT1L, r16			; TCNT0Value = 2^16 - MaxValue	
                 
0002d1 e805      		ldi	r16, $85			; MaxValue = TOVck (1.5ms or your Cal time) * Pck (1MHz) / 8 (prescaler)
0002d2 bd0d      		out TCNT1H, r16			; TCNT0Value = 255 - MaxValue	
                 
                 
                 
                 
                 		;********* Clock Interrupts
0002d3 e005      		ldi r16, (1<<TOIE0) | (1<<TOIE1)     ; Enable interrupts for Counter 0 and 1       
0002d4 bf09      		out TIMSK, r16			; Enable Timer Overflow interrupt
                 
                 
                 
                 
0002d5 e001      		ldi r16 , 1
0002d6 9300 0068 		sts PulseCounterSchedule, r16
0002d8 9300 0067 		sts PulseWidth, r16
                 
0002da e000      		ldi r16, 0
0002db 9300 0069 		sts LeftBroken, r16
0002dd 9300 006c 		sts RightBroken, r16
                 
0002df 9478      		sei ; enable interrupts
                 
                 		;********* Main infinite loop ********
                 forever:
                 		;Start_Task 1
0002e0 d001      		rcall TaskCallback
                 		;End_Task 1
0002e1 cffe      		rjmp forever 
                 ;*****************End of program *****************
                 
                 
                 ;******************Task Callbacks **********************
                 TaskCallback:
                 		;if either the door open toggle or the LeftRight was prevented from running, call them again
                 		
0002e2 9100 0073 		lds r16, DoorStopped
0002e4 fd00      		sbrc r16, 0
0002e5 d005      			rcall DoorCallback
                 
0002e6 9100 0074 		lds r16, IndicatorStopped
0002e8 fd00      		sbrc r16, 0
0002e9 d006      			rcall IndicatorCallback
                 
0002ea 9508      		ret
                 
                 DoorCallback:
0002eb d120      		rcall IntV0
0002ec e000      		ldi r16, 0
0002ed 9300 0073 		sts DoorStopped, r16
0002ef 9508      		ret
                 
                 
                 IndicatorCallback:
0002f0 d030      		rcall ClockTickLeftRight
0002f1 e000      		ldi r16, 0
0002f2 9300 0074 		sts IndicatorStopped, r16
0002f4 9508      		ret
                 ;******************END Task Callbacks **********************
                 
                 
                 
                 
                 ;***************** Clock Tick Interrupt Service Routine *****************
                 ClockTick:
0002f5 938f
0002f6 937f
0002f7 936f
0002f8 935f
0002f9 934f
0002fa 933f
0002fb 932f
0002fc 931f
0002fd 930f
0002fe 921f
0002ff 920f
000300 b70f
000301 930f      		PushAll
                 		;Start_Task 	ClockTick_Task	;Turn output indicator pin On
000302 9478      		sei		;Enable interrupts!!!
                 
                 		;********* Write ClockTick Code here ********                                                                                                                        
000303 e604      		ldi	r16, 100				; MaxValue = TOVck (1.5ms or your Cal time) * Pck (1MHz) / 8 (prescaler)
000304 bf02      		out TCNT0, r16			; TCNT0Value = 255 - MaxValue	
                 		
000305 d174      		rcall IntV1
                 		; FuelInjectionTimingTask HARD
                 		; Every nth tick, run the timing subroutine
                 
                 
                 		
                 		
                 		; Every tick, read ADCL and:
                 		; convert from fahrenheit to degrees C
                 		; convert from Fluid Ounces to Litres 
                 
                 
000306 9100 0068 		lds r16, PulseCounterSchedule
000308 9110 0067 		lds r17, PulseWidth
                 		
00030a 1701      		cp r16, r17
00030b f419      		brne SkipTask
00030c d0a4      		rcall Task_3
                 		
00030d 2700      		clr r16
00030e 2711      		clr r17
                 		
                 
                 
                 		SkipTask:
00030f 9503      		inc r16
000310 9300 0068 		sts PulseCounterSchedule, r16
                 
                 
000312 d082      		rcall MonitorTask
                 
                 		;End_Task	ClockTick_Task	;Turn output indicator pin Off
000313 910f
000314 bf0f
000315 900f
000316 901f
000317 910f
000318 911f
000319 912f
00031a 913f
00031b 914f
00031c 915f
00031d 916f
00031e 917f
00031f 918f      		PopAll
000320 9518      		RETI						;Return from Interurpt
                 
                 
                 ;***************** End External Interrupt **********************
                 
                 ;***************** Clock Tick Interrupt Service Routine *****************
                 ClockTickLeftRight:
000321 938f
000322 937f
000323 936f
000324 935f
000325 934f
000326 933f
000327 932f
000328 931f
000329 930f
00032a 921f
00032b 920f
00032c b70f
00032d 930f      		PushAll
                 
00032e 9100 0071 		lds r16, FuelInjRunning
000330 fd00      		sbrc r16, 0
000331 c05f      		rjmp StopIndicator
                 
000332 e001      		ldi r16, 1
000333 9300 0072 		sts IndicatorRunning, r16
                 		 
000335 9478      		sei		;Enable interrupts!!!
                 		
                 				;to get 0.25ms per interrupt, TCNT1 = 34286 = $85EE
000336 ee0e      		ldi	r16, $EE			; MaxValue = TOVck (1.5ms or your Cal time) * Pck (1MHz) / 8 (prescaler)
000337 bd0c      		out TCNT1L, r16			; TCNT0Value = 2^16 - MaxValue	
                 
000338 e805      		ldi	r16, $85			; MaxValue = TOVck (1.5ms or your Cal time) * Pck (1MHz) / 8 (prescaler)
000339 bd0d      		out TCNT1H, r16			; TCNT0Value = 255 - MaxValue	
                 
                 
                 		;********* Write ClockTick Code here ********
                 		;LEFT
                 
                 
                 		
                 		;When LeftLED is OFF 
00033a 9bc1      		sbis PORTB, PB1 ;Skip if Left is off (PB0 == 1)
00033b c012      		rjmp LeftLEDON ; Left is actually ON
                 
                 			;If Left is pressed
00033c 9981      			sbic PIND, PD1 ;Check if LEFT button pressed (PD7 = 0), otherwise we RJMP to the right LED code
00033d c01f      			rjmp RightLED ; Skipped if PD7 = 0
                 
                 				;If either Broken or TurnOnLeftNext
00033e 9100 0069 				lds r16, LeftBroken
000340 9110 006a 				lds r17, TurnOnLeftNext
000342 2b01      				or r16, r17 ; if LeftBroken OR TurnOnLeftNext, turn on LEFT. R16 = 1
000343 ff00      				sbrs r16, 0  ;If we want to turn on the 
000344 c005      				rjmp TurnOnLeftLater 
                 					;Turn Left ON
000345 98c1      					cbi PORTB, PB1 ; Turn the LED ON by setting PB1 = 0
000346 e000      					ldi r16, 0
000347 9300 006a 					sts TurnOnLeftNext, r16
                 
000349 c013      					rjmp RightLED
                 
                 				;Not Broken or TOLN
                 				TurnOnLeftLater:
                 					;TurnOnLeftNext = true
00034a e001      					ldi r16, 1
00034b 9300 006a 					sts TurnOnLeftNext, r16
                 					;Do nothing
                 				
00034d c00f      			rjmp RightLED
                 
                 		LeftLEDON:
                 		;If LeftLED is ON
                 
                 			;If either Broken or TurnOffLeftNext
00034e 9100 0069 			lds r16, LeftBroken
000350 9110 006b 			lds r17, TurnOffLeftNext
000352 2b01      			or r16, r17 ; if LeftBroken OR TurnOnLeftNext, turn on LEFT. R16 = 1
000353 ff00      			sbrs r16, 0  ;If we want to turn on the 
000354 c005      			rjmp TurnOffLeftLater 
                 				;Turn Left OFF
000355 9ac1      				sbi PORTB, PB1 ; Turn the LED OFF by setting PB7 = 1
000356 e000      				ldi r16, 0
000357 9300 006b 				sts TurnOffLeftNext, r16	;TurnOffLeftNext = false
                 
000359 c003      				rjmp RightLED
                 			
                 			;Not Broken or TOLN
                 			TurnOffLeftLater:
                 				;TurnOffLeftNext = true
00035a e001      				ldi r16, 1
00035b 9300 006b 				sts TurnOffLeftNext, r16
                 				;Do nothing
                 				
                 			
                 		
                 		
                 		
                 		RightLED:	
                 
                 		
                 		;When RightLED is OFF 
00035d 9bc0      		sbis PORTB, PB0 ;Skip if Right is off (PB0 == 1)
00035e c012      		rjmp RightLEDON ; Left is actually ON
                 
                 			;If Right is pressed
00035f 9980      			sbic PIND, PD0 ;Check if Right button pressed (PD0 = 0), otherwise return
000360 c01f      			rjmp BeforeRet ; Skipped if PD0 = 0
                 
                 				;If either Broken or TurnOnRightNext
000361 9100 006c 				lds r16, RightBroken
000363 9110 006d 				lds r17, TurnOnRightNext
000365 2b01      				or r16, r17 ; if RightBroken OR TurnOnRightNext, turn on RIGHT. R16 = 1
000366 ff00      				sbrs r16, 0  ;If we want to turn on the 
000367 c005      				rjmp TurnOnRightLater 
                 					;Turn RIGHT ON
000368 98c0      					cbi PORTB, PB0 ; Turn the LED ON by setting PB7 = 0
000369 e000      					ldi r16, 0
00036a 9300 006d 					sts TurnOnRightNext, r16
                 
00036c c013      					rjmp BeforeRet
                 
                 				;Not Broken or TOLN
                 				TurnOnRightLater:
                 					;TurnOnRightNext = true
00036d e001      					ldi r16, 1
00036e 9300 006d 					sts TurnOnRightNext, r16
                 					;Do nothing
                 					
000370 c00f      					rjmp BeforeRet
                 			
                 
                 		RightLEDON:
                 		;If RightLED is ON
                 
                 			;If either Broken or TurnOffRightNext
000371 9100 006c 			lds r16, RightBroken
000373 9110 006e 			lds r17, TurnOffRightNext
000375 2b01      			or r16, r17 ; if RightBroken OR TurnOnRightNext, turn on Right. R16 = 1
000376 ff00      			sbrs r16, 0  ;If we want to turn on the 
000377 c005      			rjmp TurnOffRightLater 
                 				;Turn Right OFF
000378 9ac0      				sbi PORTB, PB0 ; Turn the LED OFF by setting PB0 = 1
000379 e000      				ldi r16, 0
00037a 9300 006e 				sts TurnOffRightNext, r16	;TurnOffRightNext = false
                 
00037c c003      				rjmp BeforeRet
                 			
                 			;Not Broken or TOLN
                 			TurnOffRightLater:
                 				;TurnOffRightNext = true
00037d e001      				ldi r16, 1
00037e 9300 006e 				sts TurnOffRightNext, r16
                 				;Do nothing
                 
                 
                 
                 		BeforeRet:		
000380 e000      		ldi r16, 0
000381 9300 0072 		sts IndicatorRunning, r16
000383 910f
000384 bf0f
000385 900f
000386 901f
000387 910f
000388 911f
000389 912f
00038a 913f
00038b 914f
00038c 915f
00038d 916f
00038e 917f
00038f 918f      		PopAll
000390 9518      		RETI						;Return from Interurpt
                 
                 		StopIndicator:
000391 e001      		ldi r16, 1
000392 9300 0074 		sts IndicatorStopped, r16
000394 cfeb      		rjmp BeforeRet
                 
                 
                 ; ASYNC CODE
                 		; Collision DetectionTask HARD - DO NOT SEI 
                 		; Use ADCH and ADCL. if > 0011 (3): Turn on an LED.
                 		; Else turn off. Optimise: Only read ADCH. If any are 1. Turn on LED
                 		
                 
                 		; CarDoorIndicatorTask SOFT - SEI ON
                 		;
                 
                 		; LeftIndicatorTask FIRM
                 
                 		; RightIndicatorTask FIRM
                 
                 		; LeftToggleTask FIRM
                 
                 		; RightToggleTask FIRM
                 
                 
                 
                 
                 MonitorTask:
000395 b164      		in r22, ADCL
                 		
                 		;Treat r18 (ADCL) as Fahrenheit and convert to celcius
                 
000396 e210      		ldi r17, 32
                 
000397 1b61      		sub r22, r17
                 
000398 e039      		ldi r19, 9
                 
000399 2788      		clr r24
00039a 2777      		clr r23
00039b 2755      		clr r21
00039c 2744      		clr r20
                 		;We divide by 9
00039d dee9      		rcall div24x24_24 ;r24:r23:r22 = r24:r23:r22 / r21:r20:r19
                 
00039e e035      		ldi r19, 5
00039f 9f63      		mul r22, r19
                 
0003a0 2d60      		mov r22, r0
                 
0003a1 936f      		push r22
                 
                 				
                 
                 		//Treat r22? (ADCL) as Fluid Ounces water level input and convert the value to Litres
                 		//L =us fl oz / 33.814
                 		//L =uk fl oz / 35.195
                 
0003a2 b164      		in r22, ADCL
                 
0003a3 ee48      		ldi r20, low(1000)
0003a4 e053      		ldi r21, high(1000)
0003a5 2777      		clr r23
                 
0003a6 de60      		rcall mul16x16_32 ;r19:r18:r17:r16 = r23:r22 * r21:r20
                 
                 		
0003a7 e136      		ldi r19, low(33814)
0003a8 e844      		ldi r20, high(33814)
0003a9 2755      		clr r21
                 
0003aa 2f82      		mov r24, r18
0003ab 2f71      		mov r23, r17
0003ac 2f60      		mov r22, r16
                 
0003ad ded9      		rcall div24x24_24 ;r24:r23:r22 = r24:r23:r22 / r21:r20:r19
                 
0003ae 2f76      		mov r23, r22
                 		
0003af 916f      		pop r22
                 		
0003b0 9508      		RET
                 
                 
                 ;***************** Start of Task3 *****************
                 Task_3:	;Start_Task 	3	;Turn output indicator pin On
0003b1 938f
0003b2 937f
0003b3 936f
0003b4 935f
0003b5 934f
0003b6 933f
0003b7 932f
0003b8 931f
0003b9 930f
0003ba 921f
0003bb 920f
0003bc b70f
0003bd 930f      		PushAll
                 		
0003be e001      		ldi r16, 1
0003bf 9300 0071 		sts FuelInjRunning, r16
                 
0003c1 e0f2      		ldi ZH, high(RPMLoad_Lookup<<1)
0003c2 e0e0      		ldi ZL, low(RPMLoad_Lookup<<1)
                 
                 		 ; Read 10-bit ADC conversion result ; optimisation possible
0003c3 b124      		 in r18, ADCL
0003c4 b135      		 in r19, ADCH
                 
                 		 ;mov r18, r16 ; low
                 		 ;mov r19, r17 ; high
                 		 
                 		 ;RPM Level Lookup stored in r21
0003c5 2744      		 clr r20
0003c6 fd27      		 sbrc r18, 7 ; Skip if bit 7 in ADCL is clear
0003c7 6042      		 sbr r20, $02;
                 
0003c8 fd26      		 sbrc r18, 6 ; Skip if bit 6 in ADCL is clear
0003c9 6041      		 sbr r20, $01;
                 
0003ca e054      		 ldi r21, 4; store 4 in r20, used below
0003cb 9f45      		 mul r20, r21; Multiply r20 (the ADC result) by 4 
                 
0003cc 2d50      		 mov r21, r0 ; Move the result of the multiplication to r21
                 
                 		 ;Load lookup stored in r20
0003cd 2744      		 clr r20
0003ce fd25      		 sbrc r18,  5; Skip if bit 5 in ADCL is clear
0003cf 6042      		 sbr r20, $02;
                 
0003d0 fd24      		 sbrc r18, 4 ; Skip if bit 4 in ADCL is clear
0003d1 6041      		 sbr r20, $01;
                 
0003d2 0f54      		 add r21, r20 ; Add the load to the previous RPM level
                 
0003d3 0fe5      		 add ZL, r21
                 
0003d4 9164      		 lpm r22, z
                 
                 
                 
                 		 //Factor A lookup
0003d5 e0f2      		 ldi ZH, high(FactorA_Lookup<<1)
0003d6 e1e0      		 ldi ZL, low(FactorA_Lookup<<1)
                 
                 
0003d7 2744      		 clr r20
0003d8 fd23      		 sbrc r18,  3; Skip if bit 3 in ADCL is clear
0003d9 6042      		 sbr r20, $02;
                 
0003da fd22      		 sbrc r18, 2 ; Skip if bit 2 in ADCL is clear
0003db 6041      		 sbr r20, $01;
                 
0003dc 0fe4      		 add ZL, r20
                 
0003dd 9174      		 lpm r23, z
                 
                 
                 		 //Factor B lookup
0003de e0f2      		 ldi ZH, high(FactorB_Lookup<<1)
0003df e1e4      		 ldi ZL, low(FactorB_Lookup<<1)
                 
                 
0003e0 2744      		 clr r20
0003e1 fd21      		 sbrc r18,  1; Skip if bit 1 in ADCL is clear
0003e2 6042      		 sbr r20, $02;
                 
0003e3 fd20      		 sbrc r18, 0; Skip if bit 0 in ADCL is clear
0003e4 6041      		 sbr r20, $01;
                 
0003e5 0fe4      		 add ZL, r20
                 
0003e6 9184      		 lpm r24, z
                 
                 
                 		 //Calculate Pulse Width
                 
                 		 
0003e7 9f76      		 mul r23, r22
                 
0003e8 2d70      		 mov r23,r0
                 
0003e9 9f87      		 mul r24, r23 ; x FactorB
                 
0003ea 2d71      		 mov r23, r1
0003eb 2d60      		 mov r22, r0
                 
0003ec e238      		 ldi r19, 40; divisor
                 
0003ed 2788      		 clr r24;
0003ee 2755      		 clr r21;
0003ef 2744      		 clr r20;
                 		 ;Finally we divide by 40
0003f0 de96      		 rcall div24x24_24 ;r24:r23:r22 = r24:r23:r22 / r21:r20:r19
                 		 
0003f1 e032      		 ldi r19,2
                 
0003f2 de94      		 rcall div24x24_24 ;r24:r23:r22 = r24:r23:r22 / r21:r20:r19
                 
0003f3 9360 0067 		 sts PulseWidth, r22
                 
                 		 ;error check if PulseWidth is 0, if true then branch to set it to 1, otherwise do nothing
0003f5 3060      		 cpi r22, 0
0003f6 f009      		 breq SetToOne
                 		 
0003f7 c003      		 rjmp RetFuelInj
                 		
                 
                 		 SetToOne:
0003f8 e061      		 ldi r22, 1
0003f9 9360 0067 		 sts PulseWidth, r22
                 		 
                 		; End_Task	3	;Turn output indicator pin Off
                 
                 		RetFuelInj:
0003fb e000      		ldi r16, 0
0003fc 9300 0071 		sts FuelInjRunning, r16
                 
0003fe 910f
0003ff bf0f
000400 900f
000401 901f
000402 910f
000403 911f
000404 912f
000405 913f
000406 914f
000407 915f
000408 916f
000409 917f
00040a 918f      		PopAll
00040b 9508      		RET
                 ;***************** End Task3 **********************
                 
                 
                 
                 ;***************** Start of External Interrupt *****************
                 ; Car door status switcher ISR - Soft Real Time   ;Done!
                 ; DOOR OPEN LIGHT LED PB4
                 
                 IntV0:
00040c 938f
00040d 937f
00040e 936f
00040f 935f
000410 934f
000411 933f
000412 932f
000413 931f
000414 930f
000415 921f
000416 920f
000417 b70f
000418 930f      		PushAll
000419 9100 0071 		lds r16, FuelInjRunning
00041b fd00      		sbrc r16, 0
00041c c021      		rjmp StopDoor
                 
00041d 9478      		sei ; Enable interrupts.
                 
                 		;Check the PB2 bit. If it is set, the door WAS shut (LED off) and it's now open. We want to turn ON the LED. 
00041e 99c2      		sbic PORTB, PB2
00041f c00f      		rjmp door_shut
                 
                 		;if door was open (PB4 == 0), it is shut now
                 		
000420 9ac2      		sbi PORTB, PB2  ;SET the door LED - LED is OFF
000421 910f
000422 bf0f
000423 900f
000424 901f
000425 910f
000426 911f
000427 912f
000428 913f
000429 914f
00042a 915f
00042b 916f
00042c 917f
00042d 918f      		PopAll
00042e 9518      		RETI			;Return from Interurpt
                 
                 		door_shut:
                 		;if door was shut, we set it as open
00042f 98c2      		cbi PORTB, PB2	;Clear the door LED - LED is ON 
                 
                 		RetDoor:
000430 910f
000431 bf0f
000432 900f
000433 901f
000434 910f
000435 911f
000436 912f
000437 913f
000438 914f
000439 915f
00043a 916f
00043b 917f
00043c 918f      		PopAll
00043d 9518      		RETI			;Return from Interurpt
                 
                 		StopDoor:
00043e e001      		ldi r16, 1
00043f 9300 0073 		sts DoorStopped, r16
000441 cfee      		rjmp RetDoor
                 ;***************** End External Interrupt **********************
                 
                 
                 
                 
                 ;***************** Collision Detection*****************
                 ADCF0:	;Start_Task 	2 	;Turn output indicator pin On
000442 938f
000443 937f
000444 936f
000445 935f
000446 934f
000447 933f
000448 932f
000449 931f
00044a 930f
00044b 921f
00044c 920f
00044d b70f
00044e 930f      		PushAll
                 		;********* Write Task  here ********
                 
                 		
                 	
                 
00044f b164      		in r22, ADCL
000450 b175      		in r23, ADCH
000451 2744      		clr r20
                 
                 		;obtain 2 LSB of ADCH, store in r20
000452 fd71      		sbrc r23,  1; Skip if bit 1 in ADCH is clear
000453 6048      		sbr r20, $08;
                 
000454 fd70      		sbrc r23, 0; Skip if bit 0 in ADCH is clear
000455 6044      		sbr r20, $04;
                 
                 
                 		;obtain 2 MSB of ADCL, store in r20
000456 fd67      		sbrc r22,  7; Skip if bit 7 in ADCL is clear
000457 6042      		sbr r20, $02;
                 
000458 fd66      		sbrc r22, 6; Skip if bit 6 in ADCL is clear
000459 6041      		sbr r20, $01;
                 
                 		
00045a 3044      		cpi r20, 4
00045b f478      		brsh collision
00045c 9ac4      		sbi PORTB, PB4 ;Collision has NOT occurred. Turn off LED at PB4 by setting the bit
                 		
00045d 910f
00045e bf0f
00045f 900f
000460 901f
000461 910f
000462 911f
000463 912f
000464 913f
000465 914f
000466 915f
000467 916f
000468 917f
000469 918f      		PopAll		
00046a 9518      		RETI
                 
                 
                 		collision:
00046b 98c4      		cbi PORTB, PB4 ;Collision has occurred. Turn on LED at PB4 by clearing the bit
                 		
                 		RetADC:
00046c 910f
00046d bf0f
00046e 900f
00046f 901f
000470 910f
000471 911f
000472 912f
000473 913f
000474 914f
000475 915f
000476 916f
000477 917f
000478 918f      		PopAll		
000479 9518      		RETI
                 		
                 
                 		
                 		;end of collision
                 		
                 
                 		;************************************
                 		
                 		;End_Task	2	;Turn output indicator pin Off
                 ;***************** End Task1 **********************
                 
                 
                 
                 
                 
                 
                 ;Test ISR
                 ;To use, connect P
                 IntV1:
                 
00047a 938f
00047b 937f
00047c 936f
00047d 935f
00047e 934f
00047f 933f
000480 932f
000481 931f
000482 930f
000483 921f
000484 920f
000485 b70f
000486 930f      		PushAll
                 
000487 9100 006f 		lds r16, LeftToggled; check if left toggle was pressed already
000489 3001      		cpi r16, 1
00048a f431      		brne AllowToggleLeft
                 		; left Toggle not allowed
00048b 9b85      		sbis PIND, PD5 ; Left Broken toggle
00048c c00a      			rjmp CheckRightToggle
00048d e000      		ldi r16, 0
00048e 9300 006f 		sts LeftToggled, r16
000490 c006      		rjmp CheckRightToggle
                 
                 		AllowToggleLeft:
000491 9985      		sbic PIND, PD5 ; Left Broken toggle
000492 c004      			rjmp CheckRightToggle
                 
000493 d02e      		rcall LeftStatusToggle	;change the state of the left switch
000494 e001      		ldi r16, 1
000495 9300 006f 		sts LeftToggled, r16
                 		
                 
                 		CheckRightToggle:
                 		
000497 9100 0070 		lds r16, RightToggled ; check if right toggle was pressed already
000499 3001      		cpi r16, 1
00049a f499      		brne AllowToggleRight
                 		;Right Toggle not allowed
00049b 9b84      		sbis PIND, PD4
00049c c017      			rjmp ReturnFromIntV1
                 
00049d e000      		ldi r16, 0
00049e 9300 0070 		sts RightToggled, r16
0004a0 910f
0004a1 bf0f
0004a2 900f
0004a3 901f
0004a4 910f
0004a5 911f
0004a6 912f
0004a7 913f
0004a8 914f
0004a9 915f
0004aa 916f
0004ab 917f
0004ac 918f      		PopAll
0004ad 9518      		reti
                 
                 		AllowToggleRight:
0004ae 9984      		sbic PIND, PD4; Right Broken toggle
0004af c004      			rjmp ReturnFromIntV1
                 
0004b0 d01d      		rcall RightStatusToggle ;change the state of the right switch
0004b1 e001      		ldi r16, 1
0004b2 9300 0070 		sts RightToggled, r16
                 		
                 		
                 
                 		ReturnFromIntV1:
0004b4 910f
0004b5 bf0f
0004b6 900f
0004b7 901f
0004b8 910f
0004b9 911f
0004ba 912f
0004bb 913f
0004bc 914f
0004bd 915f
0004be 916f
0004bf 917f
0004c0 918f      			PopAll
0004c1 9518      			reti
                 
                 
                 
                 		/*PushAll
                 		
                 
                 		ldi r16, 1
                 		
                 		sbis PIND, PD5 ; Left Broken toggle
                 		rcall LeftStatusToggle	;change the state of the left switch
                 
                 		sbis PIND, PD4; Right Broken toggle
                 		rcall RightStatusToggle ;change the state of the right switch
                 
                 		PopAll
                 		reti
                 */
                 
                 
                 ;************ Toggle Normal / Broken state ************* 
                 
                 ;Left toggle
                 LeftStatusToggle:
                 		
0004c2 9100 0069 		lds r16, LeftBroken
                 
0004c4 3001      		cpi r16, 1
0004c5 f021      		breq SetLeftTo0
                 		
0004c6 e001      		ldi r16, 1
0004c7 9300 0069 		sts LeftBroken, r16
0004c9 9508      		ret
                 		
                 		SetLeftTo0:
                 
0004ca e000      		ldi r16, 0
0004cb 9300 0069 		sts LeftBroken, r16
0004cd 9508      		ret
                 
                 ;Right toggle
                 RightStatusToggle:
                 
0004ce 9100 006c 		lds r16, RightBroken
                 
0004d0 3001      		cpi r16, 1
0004d1 f021      		breq SetRightTo0
                 		
0004d2 e001      		ldi r16, 1
0004d3 9300 006c 		sts RightBroken, r16
0004d5 9508      		ret
                 		
                 		SetRightTo0:
                 
0004d6 e000      		ldi r16, 0
0004d7 9300 006c 		sts RightBroken, r16
0004d9 9508      		ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega8" register use summary:
r0 :  50 r1 :  45 r2 :  41 r3 :   0 r4 :   5 r5 :   4 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16: 179 r17:  57 r18:  55 r19:  60 r20:  64 r21:  42 r22:  53 r23:  45 
r24:  21 r25:   2 r26:   0 r27:   0 r28:   0 r29:   0 r30:   6 r31:   3 
x  :   0 y  :   0 z  :   3 
Registers used: 18 out of 35 (51.4%)

"ATmega8" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  48 add   :  28 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 breq  :   3 brge  :   0 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 brne  :   5 
brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   0 cbi   :   4 cbr   :   0 clc   :   2 clh   :   0 
cli   :   0 cln   :   0 clr   :  26 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   1 cpc   :   0 cpi   :   6 cpse  :   0 
dec   :   2 eor   :   0 fmul  :   3 fmuls :   3 fmulsu:   6 icall :   0 
ijmp  :   0 in    :  12 inc   :   1 ld    :   0 ldd   :   0 ldi   :  61 
lds   :  18 lpm   :   6 lsl   :   0 lsr   :   0 mov   :   9 movw  :   9 
mul   :  14 muls  :   3 mulsu :   6 neg   :   0 nop   :   0 or    :   4 
ori   :   0 out   :  26 pop   : 109 push  :  73 rcall :  17 ret   :  21 
reti  :   8 rjmp  :  35 rol   :   8 ror   :   0 sbc   :  14 sbci  :   0 
sbi   :  12 sbic  :   5 sbis  :   4 sbiw  :   0 sbr   :  12 sbrc  :  16 
sbrs  :   4 sec   :   2 seh   :   0 sei   :   4 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   0 std   :   0 sts   :  31 sub   :   5 subi  :   0 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 45 out of 110 (40.9%)

"ATmega8" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009b4   1470     24   1494    8192  18.2%
[.dseg] 0x000060 0x000075      0     14     14    1024   1.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
